import { dom } from '@fortawesome/fontawesome-svg-core';
const cssInserted = new WeakSet();
export const autoCssId = 'fa-auto-css';
/**
 * Ensure that Font Awesome CSS is inserted into the page.
 *
 * SVG Core has the same logic to insert the same styles into the page, however
 * it's not aware of Angular SSR and therefore styles won't be added in that
 * context leading to https://github.com/FortAwesome/angular-fontawesome/issues/48.
 * That's why the same logic is duplicated here.
 *
 * @param document - Document.
 * @param config - Font Awesome configuration.
 */
export function ensureCss(document, config) {
    if (!config.autoAddCss) {
        return;
    }
    if (cssInserted.has(document)) {
        return;
    }
    // Prevent adding the same styles again after hydration.
    if (document.getElementById(autoCssId) != null) {
        config.autoAddCss = false;
        cssInserted.add(document);
        return;
    }
    const style = document.createElement('style');
    style.setAttribute('type', 'text/css');
    style.setAttribute('id', autoCssId);
    style.innerHTML = dom.css();
    const headChildren = document.head.childNodes;
    let beforeChild = null;
    for (let i = headChildren.length - 1; i > -1; i--) {
        const child = headChildren[i];
        const tagName = child.nodeName.toUpperCase();
        if (['STYLE', 'LINK'].indexOf(tagName) > -1) {
            beforeChild = child;
        }
    }
    document.head.insertBefore(style, beforeChild);
    // Prevent SVG Core from adding the same styles.
    //
    // As the logic is present in two places and SVG Core is not aware about
    // this library, it may lead to styles being added twice. This can only
    // occur when icon is rendered by SVG Core before the Angular component
    // and should not have any significant negative impact. This is a rare
    // use case, and it's tricky to prevent, so we accept this behavior. Consumer
    // can choose to disable `FaConfig.autoAddCss` and add styles manually to
    // prevent this from happening.
    config.autoAddCss = false;
    cssInserted.add(document);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2xpYi9zaGFyZWQvdXRpbHMvY3NzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUd4RCxNQUFNLFdBQVcsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ2xDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUM7QUFFdkM7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQUMsUUFBa0IsRUFBRSxNQUFnQjtJQUM1RCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3ZCLE9BQU87SUFDVCxDQUFDO0lBRUQsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDOUIsT0FBTztJQUNULENBQUM7SUFFRCx3REFBd0Q7SUFDeEQsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQzFCLFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUIsT0FBTztJQUNULENBQUM7SUFFRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLEtBQUssQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzVCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzlDLElBQUksV0FBVyxHQUFHLElBQUksQ0FBQztJQUV2QixLQUFLLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ2xELE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTdDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDNUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN0QixDQUFDO0lBQ0gsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztJQUUvQyxnREFBZ0Q7SUFDaEQsRUFBRTtJQUNGLHdFQUF3RTtJQUN4RSx1RUFBdUU7SUFDdkUsdUVBQXVFO0lBQ3ZFLHNFQUFzRTtJQUN0RSw2RUFBNkU7SUFDN0UseUVBQXlFO0lBQ3pFLCtCQUErQjtJQUMvQixNQUFNLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkb20gfSBmcm9tICdAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtc3ZnLWNvcmUnO1xuaW1wb3J0IHsgRmFDb25maWcgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuXG5jb25zdCBjc3NJbnNlcnRlZCA9IG5ldyBXZWFrU2V0KCk7XG5leHBvcnQgY29uc3QgYXV0b0Nzc0lkID0gJ2ZhLWF1dG8tY3NzJztcblxuLyoqXG4gKiBFbnN1cmUgdGhhdCBGb250IEF3ZXNvbWUgQ1NTIGlzIGluc2VydGVkIGludG8gdGhlIHBhZ2UuXG4gKlxuICogU1ZHIENvcmUgaGFzIHRoZSBzYW1lIGxvZ2ljIHRvIGluc2VydCB0aGUgc2FtZSBzdHlsZXMgaW50byB0aGUgcGFnZSwgaG93ZXZlclxuICogaXQncyBub3QgYXdhcmUgb2YgQW5ndWxhciBTU1IgYW5kIHRoZXJlZm9yZSBzdHlsZXMgd29uJ3QgYmUgYWRkZWQgaW4gdGhhdFxuICogY29udGV4dCBsZWFkaW5nIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9Gb3J0QXdlc29tZS9hbmd1bGFyLWZvbnRhd2Vzb21lL2lzc3Vlcy80OC5cbiAqIFRoYXQncyB3aHkgdGhlIHNhbWUgbG9naWMgaXMgZHVwbGljYXRlZCBoZXJlLlxuICpcbiAqIEBwYXJhbSBkb2N1bWVudCAtIERvY3VtZW50LlxuICogQHBhcmFtIGNvbmZpZyAtIEZvbnQgQXdlc29tZSBjb25maWd1cmF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlQ3NzKGRvY3VtZW50OiBEb2N1bWVudCwgY29uZmlnOiBGYUNvbmZpZyk6IHZvaWQge1xuICBpZiAoIWNvbmZpZy5hdXRvQWRkQ3NzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNzc0luc2VydGVkLmhhcyhkb2N1bWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBQcmV2ZW50IGFkZGluZyB0aGUgc2FtZSBzdHlsZXMgYWdhaW4gYWZ0ZXIgaHlkcmF0aW9uLlxuICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYXV0b0Nzc0lkKSAhPSBudWxsKSB7XG4gICAgY29uZmlnLmF1dG9BZGRDc3MgPSBmYWxzZTtcbiAgICBjc3NJbnNlcnRlZC5hZGQoZG9jdW1lbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XG4gIHN0eWxlLnNldEF0dHJpYnV0ZSgnaWQnLCBhdXRvQ3NzSWQpO1xuICBzdHlsZS5pbm5lckhUTUwgPSBkb20uY3NzKCk7XG4gIGNvbnN0IGhlYWRDaGlsZHJlbiA9IGRvY3VtZW50LmhlYWQuY2hpbGROb2RlcztcbiAgbGV0IGJlZm9yZUNoaWxkID0gbnVsbDtcblxuICBmb3IgKGxldCBpID0gaGVhZENoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgY29uc3QgY2hpbGQgPSBoZWFkQ2hpbGRyZW5baV07XG4gICAgY29uc3QgdGFnTmFtZSA9IGNoaWxkLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG5cbiAgICBpZiAoWydTVFlMRScsICdMSU5LJ10uaW5kZXhPZih0YWdOYW1lKSA+IC0xKSB7XG4gICAgICBiZWZvcmVDaGlsZCA9IGNoaWxkO1xuICAgIH1cbiAgfVxuXG4gIGRvY3VtZW50LmhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBiZWZvcmVDaGlsZCk7XG5cbiAgLy8gUHJldmVudCBTVkcgQ29yZSBmcm9tIGFkZGluZyB0aGUgc2FtZSBzdHlsZXMuXG4gIC8vXG4gIC8vIEFzIHRoZSBsb2dpYyBpcyBwcmVzZW50IGluIHR3byBwbGFjZXMgYW5kIFNWRyBDb3JlIGlzIG5vdCBhd2FyZSBhYm91dFxuICAvLyB0aGlzIGxpYnJhcnksIGl0IG1heSBsZWFkIHRvIHN0eWxlcyBiZWluZyBhZGRlZCB0d2ljZS4gVGhpcyBjYW4gb25seVxuICAvLyBvY2N1ciB3aGVuIGljb24gaXMgcmVuZGVyZWQgYnkgU1ZHIENvcmUgYmVmb3JlIHRoZSBBbmd1bGFyIGNvbXBvbmVudFxuICAvLyBhbmQgc2hvdWxkIG5vdCBoYXZlIGFueSBzaWduaWZpY2FudCBuZWdhdGl2ZSBpbXBhY3QuIFRoaXMgaXMgYSByYXJlXG4gIC8vIHVzZSBjYXNlLCBhbmQgaXQncyB0cmlja3kgdG8gcHJldmVudCwgc28gd2UgYWNjZXB0IHRoaXMgYmVoYXZpb3IuIENvbnN1bWVyXG4gIC8vIGNhbiBjaG9vc2UgdG8gZGlzYWJsZSBgRmFDb25maWcuYXV0b0FkZENzc2AgYW5kIGFkZCBzdHlsZXMgbWFudWFsbHkgdG9cbiAgLy8gcHJldmVudCB0aGlzIGZyb20gaGFwcGVuaW5nLlxuICBjb25maWcuYXV0b0FkZENzcyA9IGZhbHNlO1xuICBjc3NJbnNlcnRlZC5hZGQoZG9jdW1lbnQpO1xufVxuIl19